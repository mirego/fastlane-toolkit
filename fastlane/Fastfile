# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

platform :ios do

  #-------------------------
  # Private lanes
  #-------------------------

  desc "Build an iOS archive given a project and configuration"
  private_lane :build do |options|
    project = options[:project]
    configuration = options[:configuration].nil? ? enterprise_configuration() : options[:configuration]
    bundleIdentifier = configuration.bundleIdentifierOverride != nil ? configuration.bundleIdentifierOverride : project.bundleIdentifier
    include_bitcode = options[:include_bitcode].nil? ? true : options[:include_bitcode]
    xcargs = options[:xcargs].nil? ? "" : options[:xcargs]

    keychain_name = strip_quotes(ENV["keychain"])
    keychain_password = strip_quotes(ENV["keychain_password"])
    keychain_path = "#{ENV["HOME"]}/Library/Keychains/#{keychain_name}.keychain-db"

    update_code_signing_settings(path: project.projectPath, use_automatic_signing: false, code_sign_identity: "Apple Distribution")
    install_provisioning_profile(path: configuration.provisioningProfile.path)

    team_id = Actions.lane_context[SharedValues::PROVISIONING_TEAM_ID]
    provisioningProfiles = { bundleIdentifier => Actions.lane_context[SharedValues::PROVISIONING_PROFILE_NAME] }

    project.extensions.each do |extension|
      if configuration.extensionProvisioningProfiles.key?(extension.bundleIdentifier)
        extensionProvisioningProfile = configuration.extensionProvisioningProfiles[extension.bundleIdentifier]
        install_provisioning_profile(path: extensionProvisioningProfile.path)
        provisioningProfiles[extension.bundleIdentifier] = Actions.lane_context[SharedValues::PROVISIONING_PROFILE_NAME]

        update_app_identifier(
          xcodeproj: project.projectPath,
          plist_path: extension.infoPlistPath,
          app_identifier: extension.bundleIdentifier
        )

        update_project_provisioning(
          xcodeproj: project.projectPath,
          target_filter: "^#{extension.target}$",
          profile: extensionProvisioningProfile.path,
          build_configuration: configuration.buildConfiguration
        )
      end
    end

    update_project_team(
      path: project.projectPath,
      teamid: Actions.lane_context[SharedValues::PROVISIONING_TEAM_ID]
    )
    update_app_identifier(
      xcodeproj: project.projectPath,
      plist_path: project.infoPlistPath,
      app_identifier: bundleIdentifier
    )
    import_certificate(
      certificate_path: configuration.certificate.path,
      certificate_password: configuration.certificate.password,
      keychain_name: keychain_name,
      keychain_path: keychain_path,
      keychain_password: keychain_password
    )
    update_project_provisioning(
      xcodeproj: project.projectPath,
      target_filter: "^#{project.target}$",
      profile: configuration.provisioningProfile.path,
      build_configuration: configuration.buildConfiguration
    )
    unlock_keychain(path: keychain_path, password: keychain_password)

    export_options = {
      signingStyle: "manual",
      provisioningProfiles: provisioningProfiles
    }

    export_options[:iCloudContainerEnvironment] = configuration.iCloudContainerEnvironment unless configuration.iCloudContainerEnvironment.nil?

    build_ios_app(
      workspace: project.workspacePath,
      scheme: project.scheme,
      clean: true,
      configuration: configuration.buildConfiguration,
      silent: false,
      include_symbols: true,
      include_bitcode: include_bitcode,
      skip_profile_detection: true,
      codesigning_identity: configuration.certificate.name,
      xcargs: xcargs,
      export_team_id: team_id,
      export_method: configuration.exportMethod,
      export_xcargs: "-allowProvisioningUpdates",
      export_options: export_options,
      buildlog_path: "./"
      )
  end
end
